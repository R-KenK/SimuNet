% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/focalList.R
\name{generate_focalList}
\alias{generate_focalList}
\title{Generator for `focalList` objects}
\usage{
generate_focalList(
  Adj,
  total_scan,
  focal.prob_fun = "even",
  all.sampled = TRUE
)
}
\arguments{
\item{Adj}{square integers matrix of occurrences of dyads.}

\item{total_scan}{integer, sampling effort. Note that 1/total_scan should be relatively small, increasingly small with increasing precision. Optional if using presence.prob.}

\item{focal.prob_fun}{either:
\itemize{
  \item{Special case `"even"` (default) tries to even out the `focal.list` as much as possible before drawing randomly following a uniform distribution}
  \item{`NULL` or `"random"`, pick focals following a uniform distribution}
  \item{a user-defined function of (n,Adj) that output a weight of being focal for each node (passed as the `prob` argument to `base::sample` function)}
}}

\item{all.sampled}{logical, should all individuals be sampled before letting them be sampled according to `focal.prob_fun`? Ignored if `focal.prob_fun` is `"even"` (because all nodes will be sampled anyway. Returns an error if `total_scan` is smaller than the number of nodes.}
}
\value{
an `focalList` object (S3 class) containing:
\itemize{
  \item{`focals`: a vector of focals (as integers)}
  \item{`Adj`: inputted `Adj`}
  \item{`total_scan`: inputted `total_scan`}
  \item{`focal.prob_type`: character scalar, either:
    \item{`"even"`: tries to even out the `focal.list` as much as possible before drawing randomly following a uniform distributionall dyad have the same probability of being sampled or not.}
    \item{`"random"`: if all node are equiprobable at each scan}
    \item{`"user-defined function"`: if the user inputted a function of (n,Adj) to calculate each node probability of being drawn at each scan}
  }
  \item{`focal.prob_fun`: either:
    \item{`"even"`}
    \item{`"random"`}
    \item{inputted `focal.prob_fun` of (n,Adj)}
  }
  \item{`all.sampled`: inputted `all.sampled`}
}
}
\description{
Generator for `focalList` objects
}
\examples{
set.seed(42)

n<- 5;nodes<- letters[1:n];total_scan<- 42;
Adj<- matrix(data = 0,nrow = n,ncol = n,dimnames = list(nodes,nodes))
Adj[non.diagonal(Adj)]<- sample(0:total_scan,n*(n-1),replace = TRUE)
Adj

generate_focalList(Adj,total_scan,focal.prob_fun = "even")
generate_focalList(Adj,total_scan,focal.prob_fun = "random",all.sampled = FALSE)

# using a user-defined function:
user_function.n<- function(n,Adj) {1:n} # comparable to a dyad-trait-based bias
user_function.n2<- function(n,Adj) {1:n*1:n} # comparable to a dyad-trait-based bias
user_function.Adj<- function(n,Adj) {colSums(Adj*Adj)} # comparable to a network-based bias

generate_focalList(Adj,total_scan,focal.prob_fun = user_function.n,all.sampled = FALSE)
generate_focalList(Adj,total_scan,focal.prob_fun = user_function.n2,all.sampled = TRUE)
generate_focalList(Adj,total_scan,focal.prob_fun = user_function.Adj,all.sampled = FALSE)

}
