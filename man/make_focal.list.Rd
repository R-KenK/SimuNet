% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/focal.list.R
\name{make_focal.list}
\alias{make_focal.list}
\title{Produce focal.list}
\usage{
make_focal.list(Adj, total_scan, focal.prob_fun = "even", all.sampled = TRUE)
}
\arguments{
\item{Adj}{square integers matrix of occurences of dyads.}

\item{total_scan}{integer, sampling effort. Note that 1/total_scan should be relatively small, increasingly small with increasing precision. Optional if using presence.prob.}

\item{focal.prob_fun}{a user-defined function of (n,Adj) that output a weight of being focal for each node (passed as `prob` argument to sample() function). By default, pick focals following a uniform distribution. Special case "even" tries to even out the focal.list as much as possible before drawing randomly following a uniform distribution.}

\item{all.sampled}{logical, should all individuals be sampled before letting them be sampled according to `focal.prob_fun`? Returns an error if total_scan is smaller than the number of nodes.}
}
\value{
a vector of focals (as integers)
}
\description{
Produce focal.list
}
\examples{
set.seed(42)
n<- 6;nodes<- as.character(1:n);
total_scan<- 22;n.boot<- 5;

Adj<- matrix(data = 0,nrow = n,ncol = n,dimnames = list(nodes,nodes))
Adj[non.diagonal(Adj)]<- round(runif(n*(n-1),0,total_scan*.50))

make_focal.list(Adj,total_scan)
make_focal.list(Adj,total_scan,focal.prob_fun = "even")
make_focal.list(Adj,total_scan,focal.prob_fun = function(n,Adj) 1:n)
make_focal.list(Adj,total_scan,focal.prob_fun = function(n,Adj) 1:n*1:n)
make_focal.list(Adj,total_scan,focal.prob_fun = function(n,Adj) exp(1:n),all.sampled = TRUE)
make_focal.list(Adj,total_scan,focal.prob_fun = function(n,Adj) log(1:n))
compute.strength<- function(graph,mode=NULL){
  if(is.matrix(graph)){
    graph<- igraph::graph.adjacency(graph,mode = mode,weighted = TRUE,add.colnames = TRUE)
  }
  stren<-igraph::strength(graph)
  if(!is.null(names(stren))) {names(stren)<- igraph::vertex_attr(graph)[[1]]}
  stren
}
make_focal.list(Adj,total_scan,focal.prob_fun = function(n,Adj) compute.strength(Adj,"directed"))
}
